* Project name: TODO

Disclaimer: `TODO` is not the final name.

`TODO` aims at being a simple TODO application that should work in
three different environments, desktop application, console application
and HTTP API (whatever clients it supports).

This is an experiment to build something in `vala` and publish it into
ElementaryOS AppCenter.

** `TODO` elements

This application will allow you to create TODO items to be executed at
some point in the future, once, or on a repeated way. It will try to
be as automated as possible, meaning that, after getting the
notification that something has to be done, you should be able to just
click a button (or perform some simple action) to have it done. This
means that we require two basic stuff:

*** Scheduling

It will be allowed to set a deadline for the completion of this task
or to set the repetition interval which this task should be completed,
and for how many instances. How Google Calendar sets this is a good
example of how I can do it, and a good example of limitations of
current alternatives/standards.

*** Automation

It should be as easy as to automate tasks like: pay that thing I have
to pay, maybe these actions are programmable and repeatable, like pay
X amount to Z should be a parametric operation that can be applied
multiple times for a given value of x and z.

** Desktop Application

The desktop context will be a simple ElementaryOS desktop application
that will allow the user to add new tasks. The firs prototype will
consist of simple TODO entry and display GUI, setting a deadline and a
priority.

*** Store the TODO!

Currently TODOs can not be added! I'm planning on using a local sqlite
database to store the user TODO list. This TODO file (~/.simpletodo/simple.db)
will be backed up.

UPDATE: after thinking this a bit I decided to have the store being 1
or multiple ORG files, so they can be read and updated with any text
editor (special interest in Emacs here). The files will be checked out
in a local git repo so we have history for free* (* some git
interaction will be required). There will be the option of pushing
changes to a git repository (someone might want to use public or
private repo). Github and bitbucket have cool ORG files formatters. I
assume others can also render ORG files to be displayed on a web
browser.

#+BEGIN_SRC org
* This is the name of the file
  I will use a top level (1 asterisk) to indicate generally relevant
  stuff, like author and stuff like that.

** TODO Some TODO I have to complete
   Each one of the second level tasks (two asterisks) will be the main
   "TODO" tasks that will appear in the UI. They will use the usual:
   TODO or DONE attributes (the one you traverse with Shift+left or
   Shit+right arrows.
** TODO Some TODO I already completed
   DEADLINE: <2017-07-10>
   This will also support the concept of DEADLINE.
** DONE Some other stuff I have TO-DO
   DEADLINE: <2017-04-25>
   Celebrate my birthday.
*** TODO Other tasks will be children of the previous ones.
    But this will not be implemented for now.
#+END_SRC

*** Auto Add TODO action

Figure out how to add a quick action to add TODO from anywhere. Lets say you
are browsing something and you want to remember something to do on a future
date. Have some kind of key combination to quickly add a new reminder or
event. If the application the user is using is known, get some contextual
information from it. For example: the user is browsing some web site and
triggers the "Quick TODO" action. The TODO will be prepopulated with: "Visit
website http://userwascheckingoutthis.com".

*** Notifications

There will be a notification (regular notifications) when one of the tasks is
due to be completed -> Tasks need to have Date and time of completion.

*** Auto calculate When

For this I should define a simple grammar that might be used to recognize the
time dimension of the task. It will accept entries as:

+ Tomorrow at 4pm
+ Every week
+ Monthly on first monday
+ First day of month
+ Not after 6pm
+ Not before tomorrow
+ ASAP

*** Triggers

This is not only a notifications app that auto calculates the deadline of your
todo tasks. It will also allow you to trigger some action:

+ Open a link (website) on a browser
+ Open an application
+ Execute some script

In the future I will incorporate tasks based on plugins like: "Make a
deposit", "Pay rent", "Call mom", etc. And even "Turn lights on", "Delete
SPAM", etc.


** CLI

The CLI will allow to obtain the list of tasks, 1 task in particular
and updating and creating new tasks in a non interactive way, for
using it into scripts or other programming languages.

** HTTP API

With a given set of credentials, the user will be able to publish his
tasks into a web service and also to fetch and change his date from
that service. This task will not be part of initial prototype.
